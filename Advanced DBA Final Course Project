1. Import the latest order_items and order_item_refunds data below into the database, and verify the
order summary trigger you created previously still works (if not, recreate it)

The trigger they are referring to was one made in an activity eariler on. This trigger takes the information within orders_items and selects certain values to be placed within the orders table to provide a summary
of the each overall order.

CREATE TRIGGER orders_itemsUPDATEorders
AFTER INSERT 
ON order_items FOR EACH ROW
REPLACE INTO orders
SELECT
	order_id,
    MIN(created_at),
    MIN(website_session_id),
    SUM(CASE
		WHEN is_primary_item = 1 
		THEN product_id
        ELSE null
        END) AS primary_product_id,
	COUNT(order_item_id) AS items_purchased,
    SUM(price_usd) AS price_usd,
    SUM(cogs_usd) AS cogs_usd
FROM order_items
WHERE order_id = new.order_id
GROUP BY 1
ORDER BY 1;

When importing the data I made sure to reference the excel sheet for how many new entries I should have had. (The entries for the items for March was 1427).

SELECT COUNT(*)
FROM order_items
WHERE created_at >= '2014-03-01'

The count of entries for the items for April was 1657.

SELECT COUNT(*)
FROM order_items
WHERE created_at >= '2014-04-01'

The count of entries for the refunds for March was 45.

SELECT COUNT(*)
FROM order_refunds
WHERE created_at BETWEEN '2014-03-01' AND '2014-04-01'

The count of entries for the refunds for April was 55.

SELECT COUNT(*)
FROM order_refunds
WHERE created_at >= '2014-04-01'

2. Import the website_sessions and website_pageviews data for March and April, provided below:

This would be the same process as the order items and order refund imports. Reference the excel sheet for the count of entries and use a SQL statement to confirm.

The count of entries for the website sessions in March (15669).

SELECT COUNT(*)
FROM website_sessions
WHERE created_at >= '2014-03-01'

The count of entries for the website sessions in April (17353).

SELECT COUNT(*)
FROM website_sessions
WHERE created_at >= '2014-04-01';

The count of entries for the website pageviews in March (38139).

SELECT COUNT(*)
FROM website_pageview
WHERE created_at >= '2014-03-01';


The count of entries for the website pageviews in April (44404).

SELECT COUNT(*)
FROM website_pageview
WHERE created_at >= '2014-04-01';

3. The company is adding chat support to the website. Youâ€™ll need to design a database plan to track
which customers and sessions utilize chat, and which chat representatives serve each customer

4. Based on your tracking plan for chat support, create an EER diagram that incorporates your new tables
into the existing database schema (including table relationships)

5. Create the tables from your chat support tracking plan in the database, and include relationships to
existing tables where applicable

-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mavenbearbuilders
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mavenbearbuilders
-- -----------------------------------------------------
USE `mavenbearbuilders` ;

-- -----------------------------------------------------
-- Table `mydb`.`Support_Customer_Details`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mavenbearbuilders`.`Support_Customer_Details` (
  `customer_id` BIGINT NOT NULL,
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `email_address` VARCHAR(125) NOT NULL,
  PRIMARY KEY (`customer_id`));


-- -----------------------------------------------------
-- Table `mydb`.`chat_rep_id`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mavenbearbuilders`.`chat_rep_id` (
  `chat_rep_id` INT NOT NULL,
  `first_name` VARCHAR(50) NOT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `role` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`chat_rep_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mavenbearbuilders`.`support_sesssion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mavenbearbuilders`.`support_sesssion` (
  `support_session_id` INT NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `order_number` BIGINT NULL,
  `customer_id` BIGINT NOT NULL,
  `chat_rep_id` INT NOT NULL,
  PRIMARY KEY (`support_session_id`),
  INDEX `FK_customer_id_customer_idx` (`customer_id` ASC) VISIBLE,
  INDEX `FK_chat_rep_id_chatrep_idx` (`chat_rep_id` ASC) VISIBLE,
  CONSTRAINT `FK_customer_id_customer`
    FOREIGN KEY (`customer_id`)
    REFERENCES `mavenbearbuilders`.`Support_Customer_Details` (`customer_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_chat_rep_id_chatrep`
    FOREIGN KEY (`chat_rep_id`)
    REFERENCES `mavenbearbuilders`.`chat_rep_id` (`chat_rep_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

ALTER TABLE `mavenbearbuilders`.`support_sesssion` 
ADD INDEX `FK_order_number_orders_idx` (`order_number` ASC) VISIBLE;
;
ALTER TABLE `mavenbearbuilders`.`support_sesssion` 
ADD CONSTRAINT `FK_order_number_orders`
  FOREIGN KEY (`order_number`)
  REFERENCES `mavenbearbuilders`.`orders` (`order_id`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION;
  
6. Using the new tables, create a stored procedure to allow the CEO to pull a count of chats handled by
chat representative for a given time period, with a simple CALL statement which includes two dates

This call statement will allow non-sql users to be able to pull up a table that will show them the performance of the chat representatives with a single line.

DELIMITER //

CREATE PROCEDURE chat_rep_performance(IN startdate DATE, IN enddate DATE)
BEGIN
SELECT
	COUNT(support_session_id) AS sessions,
        chat_rep_id
FROM support_session
WHERE DATE(created_at) BETWEEN startdate AND enddate
GROUP BY chat_rep_id;

END //

DELIMITER ;

CALL chat_rep_performance(startdate, enddate)

7. Create two Views for the potential acquiring company; one detailing monthly order volume and revenue,
the other showing monthly website traffic. Then create a new User, with access restricted to these Views

This view summarizes the order volume and revenue and grouped by the month and year.

CREATE VIEW monthly_order_vol_rev AS
SELECT
	YEAR(created_at) AS Year,
	MONTH(created_at) AS Month,
    COUNT(order_id) AS Number_of_Orders,
    SUM(price_usd) AS Revenue
FROM orders
GROUP BY 1,2;

This view summarizes the monthly website traffic and grouped by the month and year.

CREATE VIEW monthly_website_traffic AS
SELECT
	YEAR(created_at) AS Year,
	MONTH(created_at) AS Month,
    COUNT(DISTINCT website_session_id) AS Sessions
FROM website_sessions
GROUP BY 1,2;

I also created a new user that limited the role to just being able to show view and sel;ect for the mavenbearbuilders database.

8. Top data security threats are SQL injections, weak autherization, buffers, ransomware, denial of service attacks, and privilege escalation. All of these allow hackers to either access confidential backend information, personal information, or cause problems accessing the data which can prevent productivity and efficiency while working. Ways to stop these are encrypting information, giving the least amount of access needed to perform a job, making sure passwords are strong and have a variety of characters while making them reset them after a certain period of time (90-120 days).
	





