BRIDGING TABLES
-------------------------------------------------------------------------------------------------------------------
The first new concept that I learned was bridging tables by using an intermediary table.
SELECT
    actor.first_name AS actor_first_name,
    actor.last_name AS actor_last_name,
    film.title AS film_title
FROM actor
    INNER JOIN film_actor
        ON actor.actor_id = film_actor.actor_id
    INNER JOIN film
        ON film_actor.film_id = film.film_id
ORDER BY title, last_name;

This example shows how the ACTOR table is what I will consider our "base table". The FILM_ACTOR table is our intermediary table. This table will be our bridge as it has columns that are related to the base table and our end table. The FILM table is our end table and therefore we use the FILM_ACTOR columns to make a passthrough from ACTOR to FILM and therfore get the information we desire.


Multi-Condition Joins
---------------------------------------------------------------------------------------------------------------------
This concept adds the bridging tables, but also allows for WHERE conditions to be added to the JOIN condition and therefore allows you to narrow down the information from within the JOIN.

SELECT DISTINCT 
    film.title,
    film.description
FROM film
INNER JOIN inventory 
    ON film.film_id = inventory.inventory_id
INNER JOIN rental 
    ON inventory.inventory_id = rental.inventory_id AND
    store_id = 2;

This answer is correct however, there is a store_id column in the inventory table that I did not see so I could actually get rid of the second INNER JOIN.

SELECT DISTINCT 
    film.title,
    film.description
FROM film
INNER JOIN inventory 
    ON film.film_id = inventory.inventory_id AND 
    store_id = 2;
(FULL Correct Answer)

Creating New Columns
------------------------------------------------------------------------------------------------------------------
The one specific part I want to comment on is the adding the string staff as the type. It will allow me to 
categorize without having to actually make an entire new column in the table. IT mimics a table named type with the 
different SELECT statments determining the types.

SELECT
    'staff' AS type,
    first_name,
    last_name
FROM staff
UNION
SELECT
    'advisor' AS type,
    first_name,
    last_name
FROM advisor;

TRUNCATE
------------------------------------------------------------------------------------------------------------------
This is a command that allows you to remove all the data from the table while leaving the table headers and structure. Basically clearing out a table. The main difference between DROP and TRUNCATE is that drop erases the entire table plus the headers. Also, after drop if you have autocommit off you can rollback that statement. With truncate you can not roll it back. 

CREATING NEW TABLES FROM ALREADY EXISTING TABLES
------------------------------------------------------------------------------------------------------------------
CREATE TABLE Film (
SELECT DISTINCT
    film_id,
    title,
    description,
    release_year,
    rental_rate,
    rating
FROM inventory_non_normalized
ORDER BY film_id
);

Using a select statement from an already made table. You can create another table, this is good when trying to normalize a database or splitting the data from one massive table into smaller tables. 

STORED PROCEDURES 
------------------------------------------------------------------------------------------------------------------------------------------------------------------
DELIMITER //

CREATE PROCEDURE sp_staffOrdersServed()
BEGIN
SELECT SUM(orders_served) AS Total_Orders_Served
FROM staff;
END //

DELIMITER ;

CALL sp_staffOrdersServed();

DROP PROCEDURE IF EXISTS sp_staffOrdersServed();

Stored procedures allows for basically a certain query to be run within one line with a CALL statement. This is utilized for long complicated queries that are used consistently within a work environment or allows an invidividual who is not SQL savvy to be able to use certain queries without having to fully understand or need that certain information. You change the delimiter in order to use the semicolon within the statement without it being recognized as a query. Then you create the procedure and specify what the query is within a BEGIN and END statement. Then change the delimiter back. Now the query can be ran with a CALL statement. 

TRIGGERS 
---------------------------------------------------------------------------------------------------------------------
Triggers are used to keep tables in sync. If one table gets updated another table can insert, update, or delete a value from other tables. This allows for automation and prevents you from having to update each individual table with information if what is being inserted or updated correlates. 

CREATE TRIGGER COUpdateOrdersServed
AFTER INSERT ON customer_orders
FOR EACH ROW
	UPDATE staff
		SET orders_served = orders_served + 1
	WHERE staff_id = NEW.staff_id;
DELIMITER ;

CALL sp_staffOrdersServed();

DROP TRIGGER IF EXISTS COUpdateOrdersServed;
